```{r}
library(tidyverse)
library(lme4)
library(report)
library(ggeffects)

here::i_am("reports/analysis.qmd")
source(here::here("functions", "visualisation.R"))

df_pointing <- read.csv(here::here("temp", "processed", "pointing20250221.csv"))
df_distance <- read.csv(here::here("temp", "processed", "distance20250221.csv"))
df_timing <- read.csv(here::here("temp", "processed", "timing20250221.csv"))
df_questionnaire <- read.csv(here::here("temp", "processed", "questionnaire_summaries20250221.csv"))
df_combined <- read.csv(here::here("temp", "processed", "all_combined20250221.csv"))
df_combined_trials <- read.csv(here::here("temp", "processed", "all_combined_trials20250221.csv"))

knitr::opts_chunk$set(echo = FALSE)

df_combined_trials_model <- df_combined_trials %>%
  mutate(ssq_total = scale(ssq_total)) %>%
  filter(target != "OriginDoor") %>%
  mutate(abs_angle_error = abs(pointed_angle_difference),
         abs_distance_error = abs(target_pointed_distance_difference))

df_pointing_model <- df_pointing %>%
  filter(target != "OriginDoor") %>%
  mutate(abs_angle_error = abs(pointed_angle_difference),1
         abs_distance_error = abs(target_pointed_distance_difference))
```

## Pointing analysis
```{r}
df_pointing %>%
  filter(target != "OriginDoor") %>%
  group_by(participant, UnrealLevelName) %>%
  summarize(across(target_pointed_distance_difference:pointed_angle_difference,
                   list(mean = mean, median = median))) %>%
  ungroup()
```

Validation based on the origin door 

```{r}
df_pointing %>%
  mutate(training = target == "OriginDoor") %>%
  select(participant, target, training, target_pointed_distance_difference, 
         pointed_angle_difference) %>%
  pivot_longer(cols = target_pointed_distance_difference:pointed_angle_difference,
               names_to = "metric", values_to = "value") %>%
  ggplot(aes(x = value, fill = metric)) +
  geom_histogram() +
  facet_wrap(~metric+training, scales = "free") +
  theme_minimal(base_size = 16) +
  labs(title = "Validation based on the origin door") +
  theme(legend.position = "none")
```

```{r}
lmer_pointed_distance <- lmer(target_pointed_distance_difference ~ Movement + LevelSize + Vista + 
                              Movement:LevelSize + Movement:Vista + LevelSize:Vista +
                              (1|UnrealLevelName) +
                              (1|participant), data = df_pointing_model)
summary(lmer_pointed_distance)
report(lmer_pointed_distance)
predict_response(lmer_pointed_distance, margins="empirical")
```

```{r}
ggpredict(lmer_pointed_distance, terms = "Vista") %>%
  plot() +
  theme_minimal() +
  labs(title = "Effect of Vista on Pointing Distance Error",
       y = "Pointing Distance Difference",
       x = "Vista")
```

## Angle error
```{r}
df_pointing_model %>%
  ggplot(aes(x = pointed_angle_difference)) +
  geom_histogram() +
  theme_minimal() +
  labs(title = "Angle error",
       y = "Count",
       x = "Angle Error")
```

```{r}
colnames(df_pointing_model)
lmer_pointed_angle <- glmer(abs_angle_error ~ Movement + LevelSize + Vista + 
                            Movement:LevelSize + Movement:Vista + LevelSize:Vista +
                            (1|UnrealLevelName) +
                            (1|participant), data = df_pointing_model, 
                            family = Gamma(link = "log"))
```

This model has Level name as a random effect, but its variance is 0. So we remove it.

```{r}
lmer_pointed_angle <- glmer(abs_angle_error ~ Movement + LevelSize + Vista + 
                            Movement:LevelSize + Movement:Vista + LevelSize:Vista +
                            (1|UnrealLevelName) +
                            (1|participant), data = df_pointing_model,
                            family = Gamma(link = "log"))
report(lmer_pointed_angle)
predict_response(lmer_pointed_angle)
```

## Distance error

```{r}
colnames(df_distance)
```

```{r}
lm_distance <- lm(distance_items ~ Movement + LevelSize + Vista + 
                      Movement:LevelSize + Movement:Vista + LevelSize:Vista, data = df_distance)
summary(lm_distance)
report(lm_distance)
```

## Timing

# Behavioral

```{r}
str(df_questionnaire)
```

## SSQ

```{r}
df_questionnaire %>%
  select(ID, Movement, starts_with("ssq")) %>%
  pivot_longer(cols = starts_with("ssq"), names_to = "question", values_to = "value") %>%
  ggplot(aes(x = Movement, y = value)) +
    geom_boxplot() +
    facet_wrap(~question, scales = "free") +
    theme_minimal()

df_questionnaire %>%
  select(ID, Movement, starts_with("ssq")) %>%
  pivot_longer(cols = starts_with("ssq"), names_to = "question", values_to = "value") %>%
  group_by(Movement, question) %>%
  summarize(mean = str_glue("{round(mean(value), 2)}({round(sd(value), 2)})")) %>%
  ungroup() %>%
  pivot_wider(names_from = Movement, values_from = mean)
```

## Movement effect on ssq

```{r}
colnames(df_questionnaire)
lmer_ssq_causes <- df_questionnaire %>%
  mutate(ssq_causes = ssq_avg) %>%
  lmer(ssq_causes ~ Movement + (1|ID), data = .)
report(lmer_ssq_causes)
```

##

```{r effect of ssq on performance}
lmer_ssq_angle <- df_combined_trials_model %>%
  mutate(ssq = scale(ssq_nausea_total)) %>%
  glmer(abs_angle_error ~  ssq*Movement +
     (1|participant), data = .,
     family = Gamma(link = "log"))
report(lmer_ssq_angle)
predict_response(lmer_ssq_angle)
```

There is no effect of ssq on performance in angle error 

```{r}
str(df_combined_trials_model)
lmer_ssq_distance <- df_combined_trials_model %>%
  mutate(ssq = scale(ssq_nausea_total)) %>%
  lmer(distance_items ~  ssq*Movement +
     (1|participant), data = .)    
report(lmer_ssq_distance)
predict_response(lmer_ssq_distance)
```
